import jsPDF from 'jspdf';

export interface RecipeData {
  name: string;
  description: string;
  ingredients: string;
  instructions: string;
  garnish: string;
  glassware: string;
  difficultyLevel: string;
  servingSize: string;
  tips: string;
}

export function exportRecipeToPDF(recipe: RecipeData) {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;
  let yPosition = margin;

  // Helper function to add wrapped text
  const addText = (text: string, fontSize: number, isBold: boolean = false, color: string = '#000000') => {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    doc.setTextColor(color);
    
    const lines = doc.splitTextToSize(text, contentWidth);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }
      doc.text(line, margin, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += fontSize * 0.3; // Add spacing after text block
  };

  // Header with cocktail emoji
  doc.setFontSize(24);
  doc.text('üç∏', margin, yPosition);
  yPosition += 10;

  // Recipe name
  addText(recipe.name, 22, true, '#1a1a1a');
  yPosition += 5;

  // Description
  addText(recipe.description, 11, false, '#4a4a4a');
  yPosition += 8;

  // Metadata line
  const metadata = `${recipe.glassware} | ${recipe.difficultyLevel} | ${recipe.servingSize}`;
  addText(metadata, 10, false, '#6a6a6a');
  yPosition += 10;

  // Divider line
  doc.setDrawColor(200, 200, 200);
  doc.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 12;

  // Ingredients section
  addText('üß™ INGREDIENTS', 14, true, '#1a1a1a');
  yPosition += 2;
  const ingredientsList = recipe.ingredients.split('\n').filter(Boolean);
  ingredientsList.forEach(ingredient => {
    addText(`‚Ä¢ ${ingredient.trim()}`, 10, false, '#2a2a2a');
  });
  yPosition += 8;

  // Instructions section
  addText('üìù INSTRUCTIONS', 14, true, '#1a1a1a');
  yPosition += 2;
  const instructionsList = recipe.instructions.split('\n').filter(Boolean);
  instructionsList.forEach((instruction, index) => {
    addText(`${index + 1}. ${instruction.trim()}`, 10, false, '#2a2a2a');
    yPosition += 3;
  });
  yPosition += 5;

  // Garnish section
  if (recipe.garnish) {
    addText('üåø GARNISH', 14, true, '#1a1a1a');
    yPosition += 2;
    const garnishList = recipe.garnish.split('\n').filter(Boolean);
    garnishList.forEach(garnish => {
      addText(garnish.trim(), 10, false, '#2a2a2a');
    });
    yPosition += 8;
  }

  // Pro tips section
  if (recipe.tips) {
    addText('üí° PRO TIPS', 14, true, '#1a1a1a');
    yPosition += 2;
    const tipsList = recipe.tips.split('\n').filter(Boolean);
    tipsList.forEach(tip => {
      addText(`‚Ä¢ ${tip.trim()}`, 10, false, '#2a2a2a');
    });
    yPosition += 8;
  }

  // Footer
  if (yPosition > pageHeight - 30) {
    doc.addPage();
    yPosition = margin;
  }
  yPosition = pageHeight - 15;
  doc.setFontSize(8);
  doc.setTextColor('#999999');
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Elixiary AI üç∏‚ú®', pageWidth / 2, yPosition, { align: 'center' });

  // Save the PDF
  const fileName = `${recipe.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  doc.save(fileName);
}


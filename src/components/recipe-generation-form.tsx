"use client";

import { useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "@/components/ui/form";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, Wand2, Dices, Share2, Copy, Check } from "lucide-react";
import type { GenerateCocktailRecipeOutput } from "@/ai/flows/generate-cocktail-recipe";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";

const formSchema = z.object({
  prompt: z.string(),
});

type FormValues = z.infer<typeof formSchema>;

type RecipeGenerationFormProps = {
  handleGenerateRecipe: (
    input: FormValues
  ) => Promise<{
    recipe: GenerateCocktailRecipeOutput | null;
    error: string | null;
  }>;
};

const luckyPrompts = [
  "A refreshing gin-based cocktail for a hot summer day.",
  "Something smoky and sophisticated with whiskey.",
  "A spicy and tropical tequila drink.",
  "A non-alcoholic mocktail that's fruity and fun.",
  "Create a unique cocktail using bourbon and pear.",
];

export function RecipeGenerationForm({
  handleGenerateRecipe,
}: RecipeGenerationFormProps) {
  const [recipe, setRecipe] = useState<GenerateCocktailRecipeOutput | null>(
    null
  );
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: "",
    },
  });

  const handleRandomPrompt = () => {
    const randomPrompt = luckyPrompts[Math.floor(Math.random() * luckyPrompts.length)];
    form.setValue("prompt", randomPrompt);
  };

  const handleCopyRecipe = async () => {
    if (!recipe) return;
    
    const recipeText = `
üç∏ ${recipe.recipeName}

${('description' in recipe && recipe.description) ? `${recipe.description}\n` : ''}
${'glassware' in recipe && recipe.glassware ? `Glass: ${recipe.glassware}` : ''}
${'difficultyLevel' in recipe && recipe.difficultyLevel ? ` | Difficulty: ${recipe.difficultyLevel}` : ''}
${'servingSize' in recipe && recipe.servingSize ? ` | ${recipe.servingSize}` : ''}

üß™ INGREDIENTS
${recipe.ingredients}

üìù INSTRUCTIONS
${recipe.instructions}

üåø GARNISH
${recipe.garnish}

${'tips' in recipe && recipe.tips ? `üí° PRO TIPS\n${recipe.tips}\n` : ''}
---
Generated by Elixiary AI üç∏‚ú®
    `.trim();

    try {
      await navigator.clipboard.writeText(recipeText);
      setCopied(true);
      toast({
        title: "Recipe Copied! üìã",
        description: "Recipe has been copied to your clipboard. Share it with friends!",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Could not copy recipe to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleShare = async () => {
    if (!recipe) return;

    const shareText = `Check out this cocktail recipe: ${recipe.recipeName} üç∏`;
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: recipe.recipeName,
          text: shareText,
          url: window.location.href,
        });
      } catch (err) {
        // User cancelled or share failed, fall back to copy
        handleCopyRecipe();
      }
    } else {
      // Web Share API not supported, copy to clipboard
      handleCopyRecipe();
    }
  };

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    setIsLoading(true);
    setRecipe(null);
    setError(null);
    const result = await handleGenerateRecipe(data);
    setRecipe(result.recipe);
    setError(result.error);
    setIsLoading(false);
  };

  return (
    <div className="mx-auto max-w-2xl">
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
          <FormField
            control={form.control}
            name="prompt"
            render={({ field }) => (
              <FormItem>
                <FormControl>
                  <Textarea
                    placeholder="e.g., A refreshing gin-based cocktail for a hot summer day."
                    className="min-h-[100px] resize-none"
                    {...field}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="flex justify-center pt-2 gap-4">
            <Button type="submit" disabled={isLoading} size="lg">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Generate Recipe
                </>
              )}
            </Button>
            <Button type="button" variant="outline" size="lg" onClick={handleRandomPrompt} aria-label="I'm feeling lucky">
                <Dices className="h-4 w-4" />
            </Button>
          </div>
        </form>
      </Form>

      {/* AI Loading Animation */}
      {isLoading && (
        <Card className="mt-8 border-primary/50 bg-gradient-to-br from-primary/5 via-primary/10 to-primary/5">
          <CardContent className="py-12">
            <div className="flex flex-col items-center justify-center space-y-6">
              {/* Animated Cocktail Glass */}
              <div className="relative">
                <div className="absolute inset-0 animate-ping opacity-20">
                  <div className="h-24 w-24 rounded-full bg-primary"></div>
                </div>
                <div className="relative flex h-24 w-24 items-center justify-center">
                  <div className="absolute h-20 w-20 animate-spin rounded-full border-4 border-primary/20 border-t-primary"></div>
                  <div className="absolute h-16 w-16 animate-spin rounded-full border-4 border-primary/30 border-t-primary [animation-delay:-0.3s] [animation-direction:reverse]"></div>
                  <Wand2 className="h-10 w-10 animate-pulse text-primary" />
                </div>
              </div>

              {/* AI Thinking Text */}
              <div className="space-y-2 text-center">
                <h3 className="text-xl font-semibold">AI Mixologist at Work</h3>
                <div className="flex items-center justify-center space-x-1 text-muted-foreground">
                  <span className="animate-bounce [animation-delay:-0.3s]">Analyzing</span>
                  <span className="animate-bounce [animation-delay:-0.15s]">flavor</span>
                  <span className="animate-bounce">profiles</span>
                  <span className="inline-block animate-pulse">...</span>
                </div>
                <p className="text-sm text-muted-foreground">
                  Crafting your perfect cocktail recipe
                </p>
              </div>

              {/* Loading Bar */}
              <div className="w-full max-w-xs">
                <div className="h-2 w-full overflow-hidden rounded-full bg-primary/20">
                  <div className="h-full animate-[shimmer_2s_ease-in-out_infinite] bg-gradient-to-r from-transparent via-primary to-transparent"></div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {error && !isLoading && (
        <Alert variant="destructive" className="mt-8">
          <AlertTitle>Generation Failed</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {recipe && recipe.recipeName && (
        <Card className="mt-8 border-primary/20 animate-in fade-in slide-in-from-bottom-4 duration-500">
          <CardHeader className="space-y-3">
            <div className="flex items-start justify-between gap-4">
              <CardTitle className="text-3xl font-bold flex-1">{recipe.recipeName}</CardTitle>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleCopyRecipe}
                  className="gap-2"
                >
                  {copied ? (
                    <>
                      <Check className="h-4 w-4" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="h-4 w-4" />
                      Copy
                    </>
                  )}
                </Button>
                <Button
                  variant="default"
                  size="sm"
                  onClick={handleShare}
                  className="gap-2"
                >
                  <Share2 className="h-4 w-4" />
                  Share
                </Button>
              </div>
            </div>
            {'description' in recipe && recipe.description && (
              <p className="text-base text-muted-foreground italic">
                {recipe.description}
              </p>
            )}
            <div className="flex gap-4 text-sm">
              {'glassware' in recipe && recipe.glassware && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  üç∏ <span className="font-medium">{recipe.glassware}</span>
                </span>
              )}
              {'difficultyLevel' in recipe && recipe.difficultyLevel && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  üìä <span className="font-medium">{recipe.difficultyLevel}</span>
                </span>
              )}
              {'servingSize' in recipe && recipe.servingSize && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  ü•§ <span className="font-medium">{recipe.servingSize}</span>
                </span>
              )}
            </div>
          </CardHeader>
          <CardContent className="space-y-6">
            {recipe.ingredients && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üß™</span> Ingredients
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <p className="whitespace-pre-wrap text-muted-foreground leading-relaxed">
                    {recipe.ingredients}
                  </p>
                </div>
              </div>
            )}
            {recipe.instructions && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üìù</span> Instructions
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <p className="whitespace-pre-wrap text-muted-foreground leading-relaxed">
                    {recipe.instructions}
                  </p>
                </div>
              </div>
            )}
            {recipe.garnish && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üåø</span> Garnish
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <p className="whitespace-pre-wrap text-muted-foreground leading-relaxed">
                    {recipe.garnish}
                  </p>
                </div>
              </div>
            )}
            {'tips' in recipe && recipe.tips && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üí°</span> Pro Tips
                </h4>
                <div className="bg-primary/5 border border-primary/20 rounded-lg p-4">
                  <p className="whitespace-pre-wrap text-muted-foreground leading-relaxed">
                    {recipe.tips}
                  </p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}

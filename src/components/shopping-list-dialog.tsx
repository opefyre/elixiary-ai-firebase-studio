'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { ShoppingCart, Copy, Check, X } from 'lucide-react';
import { SavedRecipe } from '@/firebase/firestore/use-recipes';
import { useToast } from '@/hooks/use-toast';

interface ShoppingListDialogProps {
  selectedRecipes: SavedRecipe[];
  isOpen: boolean;
  onClose: () => void;
}

export function ShoppingListDialog({ selectedRecipes, isOpen, onClose }: ShoppingListDialogProps) {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  // Parse ingredients from all selected recipes
  const parseIngredients = () => {
    const ingredientMap = new Map<string, Set<string>>();
    
    selectedRecipes.forEach((recipe) => {
      if (!recipe.ingredients) return;
      
      const lines = recipe.ingredients.split('\n').filter(line => line.trim());
      lines.forEach((line) => {
        const cleaned = line.trim().replace(/^[-•*]\s*/, '');
        if (cleaned) {
          // Extract ingredient name (after the measurement)
          const parts = cleaned.split(/\s+/);
          if (parts.length >= 3) {
            const ingredient = parts.slice(2).join(' ');
            const measurement = parts.slice(0, 2).join(' ');
            
            if (!ingredientMap.has(ingredient)) {
              ingredientMap.set(ingredient, new Set());
            }
            ingredientMap.get(ingredient)!.add(measurement);
          } else {
            // If we can't parse, just add the whole line
            if (!ingredientMap.has(cleaned)) {
              ingredientMap.set(cleaned, new Set());
            }
          }
        }
      });
    });

    return Array.from(ingredientMap.entries()).map(([ingredient, measurements]) => ({
      ingredient,
      measurements: Array.from(measurements),
    }));
  };

  const ingredients = parseIngredients();

  // Group ingredients by category (simple heuristic)
  const categorizeIngredients = () => {
    const spirits = ingredients.filter(i => 
      /gin|vodka|rum|tequila|whiskey|bourbon|scotch|brandy|cognac|liqueur|aperol|campari|vermouth|sake|mezcal|ouzo/i.test(i.ingredient)
    );
    const mixers = ingredients.filter(i => 
      /juice|soda|water|tonic|ginger|cola|sprite|syrup|honey|sugar/i.test(i.ingredient)
    );
    const garnish = ingredients.filter(i => 
      /peel|twist|cherry|olive|mint|herb|lime|lemon|orange|fruit|flower/i.test(i.ingredient)
    );
    const other = ingredients.filter(i => 
      !spirits.includes(i) && !mixers.includes(i) && !garnish.includes(i)
    );

    return { spirits, mixers, garnish, other };
  };

  const { spirits, mixers, garnish, other } = categorizeIngredients();

  const handleCopyList = async () => {
    const shoppingList = `
🛒 Shopping List
${selectedRecipes.length} ${selectedRecipes.length === 1 ? 'Recipe' : 'Recipes'} Selected

${spirits.length > 0 ? `
🥃 SPIRITS & LIQUEURS
${spirits.map(i => `• ${i.measurements.join(', ')} ${i.ingredient}`).join('\n')}
` : ''}
${mixers.length > 0 ? `
🧃 MIXERS & SYRUPS
${mixers.map(i => `• ${i.measurements.join(', ')} ${i.ingredient}`).join('\n')}
` : ''}
${garnish.length > 0 ? `
🌿 GARNISH & FRESH INGREDIENTS
${garnish.map(i => `• ${i.measurements.join(', ')} ${i.ingredient}`).join('\n')}
` : ''}
${other.length > 0 ? `
📦 OTHER INGREDIENTS
${other.map(i => `• ${i.measurements.join(', ')} ${i.ingredient}`).join('\n')}
` : ''}
---
Generated by Elixiary AI 🍸
${window.location.origin}
    `.trim();

    try {
      await navigator.clipboard.writeText(shoppingList);
      setCopied(true);
      toast({
        title: "Shopping List Copied! 📋",
        description: "Your ingredient list has been copied to clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Could not copy shopping list",
        variant: "destructive",
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold flex items-center gap-2">
            <ShoppingCart className="h-6 w-6 text-primary" />
            Shopping List
          </DialogTitle>
          <DialogDescription>
            Ingredients needed for {selectedRecipes.length} {selectedRecipes.length === 1 ? 'recipe' : 'recipes'}
          </DialogDescription>
          
          <div className="flex gap-2 pt-4">
            <Button
              variant="default"
              size="sm"
              onClick={handleCopyList}
              className="gap-2"
            >
              {copied ? (
                <>
                  <Check className="h-4 w-4" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="h-4 w-4" />
                  Copy List
                </>
              )}
            </Button>
          </div>
        </DialogHeader>

        <div className="space-y-6 pt-4">
          {spirits.length > 0 && (
            <div>
              <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                🥃 Spirits & Liqueurs
              </h4>
              <div className="bg-muted/30 rounded-lg p-4">
                <ul className="space-y-2">
                  {spirits.map((item, idx) => (
                    <li key={idx} className="text-sm text-muted-foreground">
                      • {item.measurements.join(', ')} <span className="font-medium">{item.ingredient}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {mixers.length > 0 && (
            <div>
              <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                🧃 Mixers & Syrups
              </h4>
              <div className="bg-muted/30 rounded-lg p-4">
                <ul className="space-y-2">
                  {mixers.map((item, idx) => (
                    <li key={idx} className="text-sm text-muted-foreground">
                      • {item.measurements.join(', ')} <span className="font-medium">{item.ingredient}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {garnish.length > 0 && (
            <div>
              <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                🌿 Garnish & Fresh Ingredients
              </h4>
              <div className="bg-muted/30 rounded-lg p-4">
                <ul className="space-y-2">
                  {garnish.map((item, idx) => (
                    <li key={idx} className="text-sm text-muted-foreground">
                      • {item.measurements.join(', ')} <span className="font-medium">{item.ingredient}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}

          {other.length > 0 && (
            <div>
              <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                📦 Other Ingredients
              </h4>
              <div className="bg-muted/30 rounded-lg p-4">
                <ul className="space-y-2">
                  {other.map((item, idx) => (
                    <li key={idx} className="text-sm text-muted-foreground">
                      • {item.measurements.join(', ')} <span className="font-medium">{item.ingredient}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}


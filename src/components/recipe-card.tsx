'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle,
  DialogDescription
} from '@/components/ui/dialog';
import { Trash2, Eye, Clock, Share2, Copy, Check } from 'lucide-react';
import { SavedRecipe } from '@/firebase/firestore/use-recipes';
import ReactMarkdown from 'react-markdown';
import { useToast } from '@/hooks/use-toast';

interface RecipeCardProps {
  recipe: SavedRecipe;
  onDelete: (recipeId: string) => Promise<void>;
}

export function RecipeCard({ recipe, onDelete }: RecipeCardProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const handleDelete = async () => {
    if (!confirm(`Delete "${recipe.recipeName}"?`)) return;
    
    setIsDeleting(true);
    setIsOpen(false);
    try {
      await onDelete(recipe.id);
      toast({
        title: "Recipe Deleted",
        description: "Recipe has been removed from your collection.",
      });
    } catch (err) {
      toast({
        title: "Delete Failed",
        description: "Could not delete recipe. Please try again.",
        variant: "destructive",
      });
      setIsDeleting(false);
    }
  };

  const handleCopyRecipe = async () => {
    const recipeText = `
üç∏ ${recipe.recipeName}

${('description' in recipe && recipe.description) ? `${recipe.description}\n` : ''}
${'glassware' in recipe && recipe.glassware ? `Glass: ${recipe.glassware}` : ''}
${'difficultyLevel' in recipe && recipe.difficultyLevel ? ` | Difficulty: ${recipe.difficultyLevel}` : ''}
${'servingSize' in recipe && recipe.servingSize ? ` | ${recipe.servingSize}` : ''}

üß™ INGREDIENTS
${recipe.ingredients}

üìù INSTRUCTIONS
${recipe.instructions}

üåø GARNISH
${recipe.garnish}

${'tips' in recipe && recipe.tips ? `üí° PRO TIPS\n${recipe.tips}\n` : ''}
---
Generated by Elixiary AI üç∏‚ú®
${window.location.origin}`.trim();

    try {
      await navigator.clipboard.writeText(recipeText);
      setCopied(true);
      toast({
        title: "Recipe Copied! üìã",
        description: "Recipe has been copied to your clipboard.",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Could not copy recipe to clipboard",
        variant: "destructive",
      });
    }
  };

  const formatDate = (timestamp: any) => {
    if (!timestamp) return '';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric' 
    });
  };

  return (
    <>
      <Card className="group border-primary/20 hover:border-primary/40 transition-all cursor-pointer hover:shadow-lg">
        <div onClick={() => setIsOpen(true)}>
          <CardHeader className="space-y-3">
            <div className="flex items-start justify-between gap-2">
              <CardTitle className="text-xl font-bold line-clamp-2 flex-1 group-hover:text-primary transition-colors">
                {recipe.recipeName}
              </CardTitle>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity text-destructive hover:text-destructive hover:bg-destructive/10"
                onClick={(e) => {
                  e.stopPropagation();
                  handleDelete();
                }}
                disabled={isDeleting}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
            
            {'description' in recipe && recipe.description && (
              <p className="text-sm text-muted-foreground line-clamp-3 italic leading-relaxed">
                {recipe.description}
              </p>
            )}
          </CardHeader>

          <CardContent className="space-y-3">
            <div className="flex flex-wrap gap-2 text-xs">
              {'glassware' in recipe && recipe.glassware && (
                <span className="bg-primary/10 text-primary px-2.5 py-1 rounded-full font-medium">
                  üç∏ {recipe.glassware}
                </span>
              )}
              {'difficultyLevel' in recipe && recipe.difficultyLevel && (
                <span className="bg-muted px-2.5 py-1 rounded-full font-medium">
                  üìä {recipe.difficultyLevel}
                </span>
              )}
            </div>
            
            {recipe.createdAt && (
              <div className="flex items-center gap-1.5 text-xs text-muted-foreground pt-2 border-t border-border">
                <Clock className="h-3 w-3" />
                <span>{formatDate(recipe.createdAt)}</span>
              </div>
            )}

            <div className="flex items-center justify-center pt-2 text-sm text-primary/60 group-hover:text-primary transition-colors">
              <Eye className="h-4 w-4 mr-1.5" />
              <span className="font-medium">Click to view full recipe</span>
            </div>
          </CardContent>
        </div>
      </Card>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-start justify-between gap-4 pr-8">
              <div className="flex-1">
                <DialogTitle className="text-2xl font-bold mb-2">
                  {recipe.recipeName}
                </DialogTitle>
                {'description' in recipe && recipe.description && (
                  <DialogDescription className="text-base italic">
                    {recipe.description}
                  </DialogDescription>
                )}
              </div>
            </div>
            
            <div className="flex flex-wrap gap-2 text-sm pt-2">
              {'glassware' in recipe && recipe.glassware && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  üç∏ <span className="font-medium">{recipe.glassware}</span>
                </span>
              )}
              {'difficultyLevel' in recipe && recipe.difficultyLevel && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  üìä <span className="font-medium">{recipe.difficultyLevel}</span>
                </span>
              )}
              {'servingSize' in recipe && recipe.servingSize && (
                <span className="flex items-center gap-1 text-muted-foreground">
                  ü•§ <span className="font-medium">{recipe.servingSize}</span>
                </span>
              )}
            </div>

            <div className="flex gap-2 pt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={handleCopyRecipe}
                className="gap-2"
              >
                {copied ? (
                  <>
                    <Check className="h-4 w-4" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4" />
                    Copy Recipe
                  </>
                )}
              </Button>
              <Button
                variant="destructive"
                size="sm"
                onClick={handleDelete}
                className="gap-2"
              >
                <Trash2 className="h-4 w-4" />
                Delete
              </Button>
            </div>
          </DialogHeader>

          <div className="space-y-6 pt-4">
            {recipe.ingredients && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üß™</span> Ingredients
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <div className="prose prose-sm prose-invert max-w-none text-muted-foreground leading-relaxed">
                    <ReactMarkdown>{recipe.ingredients}</ReactMarkdown>
                  </div>
                </div>
              </div>
            )}

            {recipe.instructions && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üìù</span> Instructions
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <div className="prose prose-sm prose-invert max-w-none text-muted-foreground leading-relaxed">
                    <ReactMarkdown>{recipe.instructions}</ReactMarkdown>
                  </div>
                </div>
              </div>
            )}

            {recipe.garnish && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üåø</span> Garnish
                </h4>
                <div className="bg-muted/30 rounded-lg p-4">
                  <div className="prose prose-sm prose-invert max-w-none text-muted-foreground leading-relaxed">
                    <ReactMarkdown>{recipe.garnish}</ReactMarkdown>
                  </div>
                </div>
              </div>
            )}

            {'tips' in recipe && recipe.tips && (
              <div>
                <h4 className="text-lg font-semibold flex items-center gap-2 mb-3">
                  <span className="text-xl">üí°</span> Pro Tips
                </h4>
                <div className="bg-primary/5 border border-primary/20 rounded-lg p-4">
                  <div className="prose prose-sm prose-invert max-w-none text-muted-foreground leading-relaxed">
                    <ReactMarkdown>{recipe.tips}</ReactMarkdown>
                  </div>
                </div>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}


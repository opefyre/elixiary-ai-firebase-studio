rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // User document - users can read/update their own user doc
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow update: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // User recipes - users can only access their own recipes
    match /users/{userId}/recipes/{recipeId} {
      allow read: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }
    
    // User saved recipes collection - users can only access their own saved recipes
    match /user-saved-recipes/{recipeId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // User badges collection - users can only access their own badges
    match /user-badges/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server-side can write
    }
    
    // API Keys collection - users can only access their own API keys
    match /api_keys/{keyId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // SECURITY: Remove update permission - API key updates should be server-side only
      // allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Rate limits collection - server-side only
    match /rate_limits/{limitId} {
      allow read, write: if false; // Only server-side can access
    }
    
    // Public collections - read-only for authenticated users
    match /curated-recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side can write
    }
    
    match /curated-categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side can write
    }
    
    match /curated-tags/{tagId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side can write
    }
    
    match /daily-usage/{usageId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow write: if false; // Only server-side can write
    }
    
    // Config collection - read-only for authenticated users (for early bird counter)
    match /config/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side can write
    }
    
    // Audit logs collection - server-side only for security
    match /audit_logs/{logId} {
      allow read, write: if false; // Only server-side can access audit logs
    }
    
    // Processed webhooks collection - server-side only for idempotency
    match /processed_webhooks/{webhookId} {
      allow read, write: if false; // Only server-side can access processed webhooks
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

